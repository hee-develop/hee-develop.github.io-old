{"componentChunkName":"component---src-templates-post-tsx","path":"/post/create-github-blog-with-next-js/","result":{"data":{"article":{"html":"<p>React등을 공부하기 위해 Github pages와 Next.js를 이용해 정적 사이트(블로그)를 만들어 보기로 했다.</p>\n<h2 id=\"1-nextjs-초기화\" style=\"position:relative;\">1. next.js 초기화<a href=\"#1-nextjs-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"1 nextjs 초기화 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx create-next-app my-blog\n<span class=\"token function\">npm</span> i @types/node @types/react typescript -D\n<span class=\"token function\">touch</span> tsconfig.json\n<span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>우선 <code class=\"language-text\">create-next-app</code>을 이용해 기본적인 뼈대를 만든다.\nTypescript를 사용할 예정이므로, 관련 패키지와 설정 파일을 추가해 둔다.\n<code class=\"language-text\">tsconfig.json</code>파일을 만들어 둔 채로 next 앱을 실행하면 자동으로 typescript 설정을 대신해 준다.</p>\n<hr>\n<p>Error: Image Optimization using Next.js' default loader is not compatible with <code class=\"language-text\">next export</code>.\nPossible solutions:\n- Use <code class=\"language-text\">next start</code> to run a server, which includes the Image Optimization API.\n- Use any provider which supports Image Optimization (like Vercel).\n- Configure a third-party loader in <code class=\"language-text\">next.config.js</code>.\n- Use the <code class=\"language-text\">loader</code> prop for <code class=\"language-text\">next/image</code>.</p>\n<h2 id=\"2-패키지-설치\" style=\"position:relative;\">2. 패키지 설치<a href=\"#2-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"2 패키지 설치 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">Markdown</code>를 분석하고 HTML문서로 표현하기 위해 <code class=\"language-text\">remark</code>를 사용한다.\n<code class=\"language-text\">Markdown</code>의 헤더 정보를 분석하기 위해 <code class=\"language-text\">gray-matter</code>를 사용한다.\n이 예제에서는 글을 폴더별로 나눌 예정(<code class=\"language-text\">/articles/글제목/*.*</code>)인데, <code class=\"language-text\">fs</code>만 가지고 파일 경로를 구하는 것은 상당히 귀찮은 일이었다. 때문에 <code class=\"language-text\">glob</code>을 이용해 경로를 조금 더 쉽게 구하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i remark remark-html gray-matter -D\n<span class=\"token function\">npm</span> i glob -D</code></pre></div>\n<h2 id=\"3-markdown-파일-불러오기\" style=\"position:relative;\">3. Markdown 파일 불러오기<a href=\"#3-markdown-%ED%8C%8C%EC%9D%BC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"3 markdown 파일 불러오기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>다음은 파일을 실제로 불러 오는 작업을 진행한다.\n아직 포스트를 작성하지 않았으므로, 적당히 파일을 하나 생성한 뒤 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token font-matter yaml language-yaml\">title: test\ndate: '2021-01-01'</span>\n<span class=\"token punctuation\">---</span></span>\n\nhello, world!</code></pre></div>\n<p>대충 이런 느낌의 파일을 만들고, 관리를 쉽게 하기 위해 적당한 폴더에 집어 넣는다.\n그런 다음, 해당 폴더를 찾아 폴더 내 포스트를 읽어 오도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPostFile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fileDir<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>fileDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPostData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> Buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">matter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// gray-matter를 이용해 MD 내부의 데이터를 분리해낸다.</span>\n  <span class=\"token comment\">// data 속성 내부가 헤더 정보가 되며, 예제에선 title과 date를 넣었다.</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>postData<span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> postData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> postData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPostPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filePaths <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./articles/**/*.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 포스트를 articles폴더 내에 저장하였다. /**/*.md 는 articles내 모든 폴더 안에 있는 *.md 파일을 의미한다.</span>\n  <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> filePaths\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">=></span> fp<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/(\\w|-)+\\.md$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\/(.md)]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 파일 이름을 id로 사용하고 싶었기 때문에, 일부러 파일 이름은 별도로 빼도록 했다.</span>\n\n  <span class=\"token keyword\">const</span> postPaths<span class=\"token operator\">:</span> PostPathType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token generic-function\"><span class=\"token function\">i</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span> filePaths<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    postPaths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> filePaths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      fileName<span class=\"token operator\">:</span> fileName<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> postPaths<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllPostData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getPostPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>postPath <span class=\"token operator\">=></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fileName<span class=\"token operator\">:</span> postPath<span class=\"token punctuation\">.</span>fileName<span class=\"token punctuation\">,</span> file<span class=\"token operator\">:</span> <span class=\"token function\">getPostFile</span><span class=\"token punctuation\">(</span>postPath<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fileName<span class=\"token punctuation\">,</span> file <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token function\">getPostData</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fileName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">getAllPostData</code>를 부르면, <code class=\"language-text\">articles</code>폴더 내의 모든 포스트의 정보를 가져올 수 있게 된다.\n제대로 동작하는지 확인하기 위해, <code class=\"language-text\">index</code>에 대충 넣어본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetStaticProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">getAllPostData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>postData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> postData<span class=\"token punctuation\">.</span>fileName<span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> postData<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> postData<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> postData<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>주의: <code class=\"language-text\">getAllPostData()</code>함수는 트랜스파일 단계에서 불린다. 즉 컴포넌트에서 직접 부르는 것은 불가능하므로, Next의 API(<code class=\"language-text\">getStaticProps()</code>)에서 불러와야만 한다.</p>\n<p>chmod +x ./build.sh</p>\n<p>git add out/\ngit commit -m\ngit subtree push --prefix out origin gh-pages</p>\n<p><a href=\"https://jfelix.info/blog/how-to-make-a-static-blog-with-next-js\">https://jfelix.info/blog/how-to-make-a-static-blog-with-next-js</a></p>","frontmatter":{"title":"Next.js를 이용해 Github blog 만들기(1)","date":"2021-06-07"}},"toc":{"tableOfContents":"<ul>\n<li><a href=\"#1-nextjs-%EC%B4%88%EA%B8%B0%ED%99%94\">1. next.js 초기화</a></li>\n<li><a href=\"#2-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\">2. 패키지 설치</a></li>\n<li><a href=\"#3-markdown-%ED%8C%8C%EC%9D%BC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\">3. Markdown 파일 불러오기</a></li>\n</ul>"},"previous":null,"next":null},"pageContext":{"id":"79e68fe5-ca5c-5b11-afaa-dc8327ac31e8","prevPostId":null,"nextPostId":null}},"staticQueryHashes":[]}